[
  {
    "uri": "/repositories/:repo_id/accessions/:id",
    "description": "Update an Accession",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "accession",
        "JSONModel(:accession)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/accessions",
    "description": "Create an Accession",
    "method": [
      "post"
    ],
    "params": [
      [
        "accession",
        "JSONModel(:accession)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/accessions",
    "description": "Get a list of Accessions for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:accession)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/accessions/:id",
    "description": "Get an Accession by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:accession)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/accessions/:id",
    "description": "Delete an Accession",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/agents/corporate_entities",
    "description": "Create a corporate entity agent",
    "method": [
      "post"
    ],
    "params": [
      [
        "agent",
        "JSONModel(:agent_corporate_entity)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/agents/corporate_entities",
    "description": "List all corporate entity agents",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:agent_corporate_entity)]"
      ]
    ]
  },
  {
    "uri": "/agents/corporate_entities/:id",
    "description": "Update a corporate entity agent",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "agent",
        "JSONModel(:agent_corporate_entity)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/agents/corporate_entities/:id",
    "description": "Get a corporate entity by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "ID of the corporate entity agent"
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:agent_corporate_entity)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/agents/corporate_entities/:id",
    "description": "Delete a corporate entity agent",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "ID of the corporate entity agent"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/agents/families",
    "description": "Create a family agent",
    "method": [
      "post"
    ],
    "params": [
      [
        "agent",
        "JSONModel(:agent_family)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/agents/families",
    "description": "List all family agents",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:agent_family)]"
      ]
    ]
  },
  {
    "uri": "/agents/families/:id",
    "description": "Update a family agent",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "agent",
        "JSONModel(:agent_family)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/agents/families/:id",
    "description": "Get a family by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "ID of the family agent"
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:agent)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/agents/families/:id",
    "description": "Delete an agent family",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "ID of the family agent"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/agents/people",
    "description": "Create a person agent",
    "method": [
      "post"
    ],
    "params": [
      [
        "agent",
        "JSONModel(:agent_person)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/agents/people",
    "description": "List all person agents",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:agent_person)]"
      ]
    ]
  },
  {
    "uri": "/agents/people/:id",
    "description": "Update a person agent",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "agent",
        "JSONModel(:agent_person)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/agents/people/:id",
    "description": "Get a person by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "ID of the person agent"
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:agent)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/agents/people/:id",
    "description": "Delete an agent person",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "ID of the person agent"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/agents/software",
    "description": "Create a software agent",
    "method": [
      "post"
    ],
    "params": [
      [
        "agent",
        "JSONModel(:agent_software)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/agents/software",
    "description": "List all software agents",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:agent_software)]"
      ]
    ]
  },
  {
    "uri": "/agents/software/:id",
    "description": "Update a software agent",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "agent",
        "JSONModel(:agent_software)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/agents/software/:id",
    "description": "Get a software agent by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "ID of the software agent"
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:agent)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/agents/software/:id",
    "description": "Delete a software agent",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "ID of the software agent"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects",
    "description": "Create an Archival Object",
    "method": [
      "post"
    ],
    "params": [
      [
        "archival_object",
        "JSONModel(:archival_object)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects/:id",
    "description": "Update an Archival Object",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "archival_object",
        "JSONModel(:archival_object)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects/:id/parent",
    "description": "Set the parent/position of an Archival Object in a tree",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "parent",
        "Integer",
        "The parent of this node in the tree",
        {
          "optional": true
        }
      ],
      [
        "position",
        "Integer",
        "The position of this node in the tree",
        {
          "optional": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects/:id",
    "description": "Get an Archival Object by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:archival_object)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects/:id/children",
    "description": "Get the children of an Archival Object",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "a list of archival object references"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects/:id/previous",
    "description": "Get the previous record in the tree for an Archival Object",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:archival_object)"
      ],
      [
        404,
        "No previous node"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects",
    "description": "Get a list of Archival Objects for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:archival_object)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects/:id",
    "description": "Delete an Archival Object",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/assessments/:id",
    "description": "Update an Assessment",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "assessment",
        "JSONModel(:assessment)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/assessments",
    "description": "Create an Assessment",
    "method": [
      "post"
    ],
    "params": [
      [
        "assessment",
        "JSONModel(:assessment)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/assessments",
    "description": "Get a list of Assessments for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:assessment)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/assessments/:id",
    "description": "Get an Assessment by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:assessment)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/assessments/:id",
    "description": "Delete an Assessment",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/assessment_attribute_definitions",
    "description": "Update this repository's assessment attribute definitions",
    "method": [
      "post"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "assessment_attribute_definitions",
        "JSONModel(:assessment_attribute_definitions)",
        "The assessment attribute definitions",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/assessment_attribute_definitions",
    "description": "Get this repository's assessment attribute definitions",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:assessment_attribute_definitions)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/batch_imports",
    "description": "Import a batch of records",
    "method": [
      "post"
    ],
    "params": [
      [
        "batch_import",
        "body_stream",
        "The batch of records"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "migration",
        "String",
        "Param to indicate we are using a migrator",
        {
          "optional": true
        }
      ],
      [
        "skip_results",
        "RESTHelpers::BooleanParam",
        "If true, don't return the list of created record URIs",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications",
    "description": "Create a Classification",
    "method": [
      "post"
    ],
    "params": [
      [
        "classification",
        "JSONModel(:classification)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications/:id",
    "description": "Get a Classification",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:classification)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications/:id/tree",
    "description": "Get a Classification tree",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "OK"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications/:id",
    "description": "Update a Classification",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "classification",
        "JSONModel(:classification)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications",
    "description": "Get a list of Classifications for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:classification)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications/:id",
    "description": "Delete a Classification",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications/:id/tree/root",
    "description": "Fetch tree information for the top-level classification record",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON object describing enough information about this tree's root record to render the rest.  Includes:\n\n  * title -- the collection title\n\n  * uri -- the collection URI\n\n  * child_count -- the number of immediate children\n\n  * waypoints -- the number of \"waypoints\" those children are grouped into\n\n  * waypoint_size -- the number of children in each waypoint"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications/:id/tree/waypoint",
    "description": "Fetch the record slice for a given tree waypoint",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "offset",
        "Integer",
        "The page of records to return"
      ],
      [
        "parent_node",
        "String",
        "The URI of the parent of this waypoint (none for the root record)",
        {
          "optional": true
        }
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON array containing information for the records contained in a given waypoint.  Each array element is an object that includes:\n\n  * title -- the record's title\n\n  * uri -- the record URI\n\n  * position -- the logical position of this record within its subtree\n\n  * parent_id -- the internal ID of this document's parent"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications/:id/tree/node",
    "description": "Fetch tree information for an Classification Term record within a tree",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "node_uri",
        "String",
        "The URI of the Classification Term record of interest"
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON object describing enough information about a specific node.  Includes:\n\n  * title -- the collection title\n\n  * uri -- the collection URI\n\n  * child_count -- the number of immediate children\n\n  * waypoints -- the number of \"waypoints\" those children are grouped into\n\n  * waypoint_size -- the number of children in each waypoint\n\n  * position -- the logical position of this record within its subtree\n\n  * precomputed_waypoints -- a collection of arrays (keyed on child URI) in the\n    same format as returned by the '/waypoint' endpoint.  Since a fetch for a\n    given node is almost always followed by a fetch of the first waypoint, using\n    the information in this structure can save a backend call."
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications/:id/tree/node_from_root",
    "description": "Fetch tree path from the root record to Classification Terms",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "node_ids",
        [
          "Integer"
        ],
        "The IDs of the Classification Term records of interest"
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON array describing the path to a node, starting from the root of the tree.  Each path element provides:\n\n  * node -- the URI of the node to next expand\n\n  * offset -- the waypoint number within `node` that contains the next entry in\n    the path (or the desired record, if we're at the end of the path)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classification_terms",
    "description": "Create a Classification Term",
    "method": [
      "post"
    ],
    "params": [
      [
        "classification_term",
        "JSONModel(:classification_term)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classification_terms/:id",
    "description": "Update a Classification Term",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "classification_term",
        "JSONModel(:classification_term)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classification_terms/:id/parent",
    "description": "Set the parent/position of a Classification Term in a tree",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "parent",
        "Integer",
        "The parent of this node in the tree",
        {
          "optional": true
        }
      ],
      [
        "position",
        "Integer",
        "The position of this node in the tree",
        {
          "optional": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classification_terms/:id",
    "description": "Get a Classification Term by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:classification_term)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classification_terms/:id/children",
    "description": "Get the children of a Classification Term",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "a list of classification term references"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classification_terms",
    "description": "Get a list of Classification Terms for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:classification_term)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classification_terms/:id",
    "description": "Delete a Classification Term",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/collection_management/:id",
    "description": "Get a Collection Management Record by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:collection_management)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/children",
    "description": "Batch create several Archival Objects as children of an existing Resource",
    "method": [
      "post"
    ],
    "params": [
      [
        "children",
        "JSONModel(:archival_record_children)",
        "The children to add to the resource",
        {
          "body": true
        }
      ],
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects/:id/children",
    "description": "Batch create several Archival Objects as children of an existing Archival Object",
    "method": [
      "post"
    ],
    "params": [
      [
        "children",
        "JSONModel(:archival_record_children)",
        "The children to add to the archival object",
        {
          "body": true
        }
      ],
      [
        "id",
        "Integer",
        "The ID of the archival object to add children to"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id/children",
    "description": "Batch create several Digital Object Components as children of an existing Digital Object",
    "method": [
      "post"
    ],
    "params": [
      [
        "children",
        "JSONModel(:digital_record_children)",
        "The component children to add to the digital object",
        {
          "body": true
        }
      ],
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_object_components/:id/children",
    "description": "Batch create several Digital Object Components as children of an existing Digital Object Component",
    "method": [
      "post"
    ],
    "params": [
      [
        "children",
        "JSONModel(:digital_record_children)",
        "The children to add to the digital object component",
        {
          "body": true
        }
      ],
      [
        "id",
        "Integer",
        "The ID of the digital object component to add children to"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects/:id/accept_children",
    "description": "Move existing Archival Objects to become children of an Archival Object",
    "method": [
      "post"
    ],
    "params": [
      [
        "children",
        [
          "String"
        ],
        "The children to move to the Archival Object",
        {
          "optional": true
        }
      ],
      [
        "id",
        "Integer",
        "The ID of the Archival Object to move children to"
      ],
      [
        "position",
        "Integer",
        "The index for the first child to be moved to"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/accept_children",
    "description": "Move existing Archival Objects to become children of a Resource",
    "method": [
      "post"
    ],
    "params": [
      [
        "children",
        [
          "String"
        ],
        "The children to move to the Resource",
        {
          "optional": true
        }
      ],
      [
        "id",
        "Integer",
        "The ID of the Resource to move children to"
      ],
      [
        "position",
        "Integer",
        "The index for the first child to be moved to"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id/accept_children",
    "description": "Move existing Digital Object components to become children of a Digital Object",
    "method": [
      "post"
    ],
    "params": [
      [
        "children",
        [
          "String"
        ],
        "The children to move to the Digital Object",
        {
          "optional": true
        }
      ],
      [
        "id",
        "Integer",
        "The ID of the Digital Object to move children to"
      ],
      [
        "position",
        "Integer",
        "The index for the first child to be moved to"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_object_components/:id/accept_children",
    "description": "Move existing Digital Object Components to become children of a Digital Object Component",
    "method": [
      "post"
    ],
    "params": [
      [
        "children",
        [
          "String"
        ],
        "The children to move to the Digital Object Component",
        {
          "optional": true
        }
      ],
      [
        "id",
        "Integer",
        "The ID of the Digital Object Component to move children to"
      ],
      [
        "position",
        "Integer",
        "The index for the first child to be moved to"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classifications/:id/accept_children",
    "description": "Move existing Classification Terms to become children of a Classification",
    "method": [
      "post"
    ],
    "params": [
      [
        "children",
        [
          "String"
        ],
        "The children to move to the Classification",
        {
          "optional": true
        }
      ],
      [
        "id",
        "Integer",
        "The ID of the Classification to move children to"
      ],
      [
        "position",
        "Integer",
        "The index for the first child to be moved to"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/classification_terms/:id/accept_children",
    "description": "Move existing Classification Terms to become children of another Classification Term",
    "method": [
      "post"
    ],
    "params": [
      [
        "children",
        [
          "String"
        ],
        "The children to move to the Classification Term",
        {
          "optional": true
        }
      ],
      [
        "id",
        "Integer",
        "The ID of the Classification Term to move children to"
      ],
      [
        "position",
        "Integer",
        "The index for the first child to be moved to"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/component_transfers",
    "description": "Transfer components from one resource to another",
    "method": [
      "post"
    ],
    "params": [
      [
        "target_resource",
        "String",
        "The URI of the resource to transfer into"
      ],
      [
        "component",
        "String",
        "The URI of the archival object to transfer"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/search",
    "description": "Search this repository",
    "method": [
      "get",
      "post"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "q",
        "String",
        "A search query string.  Uses Lucene 4.0 syntax: http://lucene.apache.org/core/4_0_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html  Search index structure can be found in solr/schema.xml",
        {
          "optional": true
        }
      ],
      [
        "aq",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query",
        {
          "optional": true
        }
      ],
      [
        "type",
        [
          "String"
        ],
        "The record type to search (defaults to all types if not specified)",
        {
          "optional": true
        }
      ],
      [
        "sort",
        "String",
        "The attribute to sort and the direction e.g. &sort=title desc&...",
        {
          "optional": true
        }
      ],
      [
        "facet",
        [
          "String"
        ],
        "The list of the fields to produce facets for",
        {
          "optional": true
        }
      ],
      [
        "facet_mincount",
        "Integer",
        "The minimum count for a facet field to be included in the response",
        {
          "optional": true
        }
      ],
      [
        "filter",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query to filter by",
        {
          "optional": true
        }
      ],
      [
        "exclude",
        [
          "String"
        ],
        "A list of document IDs that should be excluded from results",
        {
          "optional": true
        }
      ],
      [
        "hl",
        "RESTHelpers::BooleanParam",
        "Whether to use highlighting",
        {
          "optional": true
        }
      ],
      [
        "root_record",
        "String",
        "Search within a collection of records (defined by the record at the root of the tree)",
        {
          "optional": true
        }
      ],
      [
        "dt",
        "String",
        "Format to return (JSON default)",
        {
          "optional": true
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        ""
      ]
    ]
  },
  {
    "uri": "/search",
    "description": "Search this archive",
    "method": [
      "get",
      "post"
    ],
    "params": [
      [
        "q",
        "String",
        "A search query string.  Uses Lucene 4.0 syntax: http://lucene.apache.org/core/4_0_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html  Search index structure can be found in solr/schema.xml",
        {
          "optional": true
        }
      ],
      [
        "aq",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query",
        {
          "optional": true
        }
      ],
      [
        "type",
        [
          "String"
        ],
        "The record type to search (defaults to all types if not specified)",
        {
          "optional": true
        }
      ],
      [
        "sort",
        "String",
        "The attribute to sort and the direction e.g. &sort=title desc&...",
        {
          "optional": true
        }
      ],
      [
        "facet",
        [
          "String"
        ],
        "The list of the fields to produce facets for",
        {
          "optional": true
        }
      ],
      [
        "facet_mincount",
        "Integer",
        "The minimum count for a facet field to be included in the response",
        {
          "optional": true
        }
      ],
      [
        "filter",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query to filter by",
        {
          "optional": true
        }
      ],
      [
        "exclude",
        [
          "String"
        ],
        "A list of document IDs that should be excluded from results",
        {
          "optional": true
        }
      ],
      [
        "hl",
        "RESTHelpers::BooleanParam",
        "Whether to use highlighting",
        {
          "optional": true
        }
      ],
      [
        "root_record",
        "String",
        "Search within a collection of records (defined by the record at the root of the tree)",
        {
          "optional": true
        }
      ],
      [
        "dt",
        "String",
        "Format to return (JSON default)",
        {
          "optional": true
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        ""
      ]
    ]
  },
  {
    "uri": "/search/repositories",
    "description": "Search across repositories",
    "method": [
      "get",
      "post"
    ],
    "params": [
      [
        "q",
        "String",
        "A search query string.  Uses Lucene 4.0 syntax: http://lucene.apache.org/core/4_0_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html  Search index structure can be found in solr/schema.xml",
        {
          "optional": true
        }
      ],
      [
        "aq",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query",
        {
          "optional": true
        }
      ],
      [
        "type",
        [
          "String"
        ],
        "The record type to search (defaults to all types if not specified)",
        {
          "optional": true
        }
      ],
      [
        "sort",
        "String",
        "The attribute to sort and the direction e.g. &sort=title desc&...",
        {
          "optional": true
        }
      ],
      [
        "facet",
        [
          "String"
        ],
        "The list of the fields to produce facets for",
        {
          "optional": true
        }
      ],
      [
        "facet_mincount",
        "Integer",
        "The minimum count for a facet field to be included in the response",
        {
          "optional": true
        }
      ],
      [
        "filter",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query to filter by",
        {
          "optional": true
        }
      ],
      [
        "exclude",
        [
          "String"
        ],
        "A list of document IDs that should be excluded from results",
        {
          "optional": true
        }
      ],
      [
        "hl",
        "RESTHelpers::BooleanParam",
        "Whether to use highlighting",
        {
          "optional": true
        }
      ],
      [
        "root_record",
        "String",
        "Search within a collection of records (defined by the record at the root of the tree)",
        {
          "optional": true
        }
      ],
      [
        "dt",
        "String",
        "Format to return (JSON default)",
        {
          "optional": true
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        ""
      ]
    ]
  },
  {
    "uri": "/search/records",
    "description": "Return a set of records by URI",
    "method": [
      "get",
      "post"
    ],
    "params": [
      [
        "uri",
        [
          "String"
        ],
        "The list of record URIs to fetch"
      ],
      [
        "resolve",
        [
          "String"
        ],
        "The list of result fields to resolve (if any)",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "a JSON map of records"
      ]
    ]
  },
  {
    "uri": "/search/record_types_by_repository",
    "description": "Return the counts of record types of interest by repository",
    "method": [
      "get",
      "post"
    ],
    "params": [
      [
        "record_types",
        [
          "String"
        ],
        "The list of record types to tally"
      ],
      [
        "repo_uri",
        "String",
        "An optional repository URI.  If given, just return counts for the single repository",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "If repository is given, returns a map like {'record_type' => <count>}.  Otherwise, {'repo_uri' => {'record_type' => <count>}}"
      ]
    ]
  },
  {
    "uri": "/search/subjects",
    "description": "Search across subjects",
    "method": [
      "get",
      "post"
    ],
    "params": [
      [
        "q",
        "String",
        "A search query string.  Uses Lucene 4.0 syntax: http://lucene.apache.org/core/4_0_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html  Search index structure can be found in solr/schema.xml",
        {
          "optional": true
        }
      ],
      [
        "aq",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query",
        {
          "optional": true
        }
      ],
      [
        "type",
        [
          "String"
        ],
        "The record type to search (defaults to all types if not specified)",
        {
          "optional": true
        }
      ],
      [
        "sort",
        "String",
        "The attribute to sort and the direction e.g. &sort=title desc&...",
        {
          "optional": true
        }
      ],
      [
        "facet",
        [
          "String"
        ],
        "The list of the fields to produce facets for",
        {
          "optional": true
        }
      ],
      [
        "facet_mincount",
        "Integer",
        "The minimum count for a facet field to be included in the response",
        {
          "optional": true
        }
      ],
      [
        "filter",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query to filter by",
        {
          "optional": true
        }
      ],
      [
        "exclude",
        [
          "String"
        ],
        "A list of document IDs that should be excluded from results",
        {
          "optional": true
        }
      ],
      [
        "hl",
        "RESTHelpers::BooleanParam",
        "Whether to use highlighting",
        {
          "optional": true
        }
      ],
      [
        "root_record",
        "String",
        "Search within a collection of records (defined by the record at the root of the tree)",
        {
          "optional": true
        }
      ],
      [
        "dt",
        "String",
        "Format to return (JSON default)",
        {
          "optional": true
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        ""
      ]
    ]
  },
  {
    "uri": "/search/published_tree",
    "description": "Find the tree view for a particular archival record",
    "method": [
      "get"
    ],
    "params": [
      [
        "node_uri",
        "String",
        "The URI of the archival record to find the tree view for"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "OK"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers/search",
    "description": "Search for top containers",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "q",
        "String",
        "A search query string.  Uses Lucene 4.0 syntax: http://lucene.apache.org/core/4_0_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html  Search index structure can be found in solr/schema.xml",
        {
          "optional": true
        }
      ],
      [
        "aq",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query",
        {
          "optional": true
        }
      ],
      [
        "type",
        [
          "String"
        ],
        "The record type to search (defaults to all types if not specified)",
        {
          "optional": true
        }
      ],
      [
        "sort",
        "String",
        "The attribute to sort and the direction e.g. &sort=title desc&...",
        {
          "optional": true
        }
      ],
      [
        "facet",
        [
          "String"
        ],
        "The list of the fields to produce facets for",
        {
          "optional": true
        }
      ],
      [
        "facet_mincount",
        "Integer",
        "The minimum count for a facet field to be included in the response",
        {
          "optional": true
        }
      ],
      [
        "filter",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query to filter by",
        {
          "optional": true
        }
      ],
      [
        "exclude",
        [
          "String"
        ],
        "A list of document IDs that should be excluded from results",
        {
          "optional": true
        }
      ],
      [
        "hl",
        "RESTHelpers::BooleanParam",
        "Whether to use highlighting",
        {
          "optional": true
        }
      ],
      [
        "root_record",
        "String",
        "Search within a collection of records (defined by the record at the root of the tree)",
        {
          "optional": true
        }
      ],
      [
        "dt",
        "String",
        "Format to return (JSON default)",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:top_container)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers/:id",
    "description": "Update a top container",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "top_container",
        "JSONModel(:top_container)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers",
    "description": "Create a top container",
    "method": [
      "post"
    ],
    "params": [
      [
        "top_container",
        "JSONModel(:top_container)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers",
    "description": "Get a list of TopContainers for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:top_container)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers/:id",
    "description": "Get a top container by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:top_container)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers/:id",
    "description": "Delete a top container",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers/batch/ils_holding_id",
    "description": "Update ils_holding_id for a batch of top containers",
    "method": [
      "post"
    ],
    "params": [
      [
        "ids",
        [
          "Integer"
        ]
      ],
      [
        "ils_holding_id",
        "String",
        "Value to set for ils_holding_id"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers/batch/container_profile",
    "description": "Update container profile for a batch of top containers",
    "method": [
      "post"
    ],
    "params": [
      [
        "ids",
        [
          "Integer"
        ]
      ],
      [
        "container_profile_uri",
        "String",
        "The uri of the container profile"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers/batch/location",
    "description": "Update location for a batch of top containers",
    "method": [
      "post"
    ],
    "params": [
      [
        "ids",
        [
          "Integer"
        ]
      ],
      [
        "location_uri",
        "String",
        "The uri of the location"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers/bulk/barcodes",
    "description": "Bulk update barcodes",
    "method": [
      "post"
    ],
    "params": [
      [
        "barcode_data",
        "String",
        "JSON string containing barcode data {uri=>barcode}",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/top_containers/bulk/locations",
    "description": "Bulk update locations",
    "method": [
      "post"
    ],
    "params": [
      [
        "location_data",
        "String",
        "JSON string containing location data {container_uri=>location_uri}",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/container_profiles/:id",
    "description": "Update a Container Profile",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "container_profile",
        "JSONModel(:container_profile)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/container_profiles",
    "description": "Create a Container_Profile",
    "method": [
      "post"
    ],
    "params": [
      [
        "container_profile",
        "JSONModel(:container_profile)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ]
    ]
  },
  {
    "uri": "/container_profiles",
    "description": "Get a list of Container Profiles",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:container_profile)]"
      ]
    ]
  },
  {
    "uri": "/container_profiles/:id",
    "description": "Get a Container Profile by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:container_profile)"
      ]
    ]
  },
  {
    "uri": "/container_profiles/:id",
    "description": "Delete an Container Profile",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/date_calculator",
    "description": "Calculate the dates of an archival object tree",
    "method": [
      "get"
    ],
    "params": [
      [
        "record_uri",
        "String",
        "The uri of the object"
      ],
      [
        "label",
        "String",
        "The date label to filter on",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Calculation results"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/default_values/:record_type",
    "description": "Save defaults for a record type",
    "method": [
      "post"
    ],
    "params": [
      [
        "default_values",
        "JSONModel(:default_values)",
        "The default values set",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "record_type",
        "String"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/default_values/:record_type",
    "description": "Get default values for a record type",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "record_type",
        "String"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/batch_delete",
    "description": "Carry out delete requests against a list of records",
    "method": [
      "post"
    ],
    "params": [
      [
        "record_uris",
        [
          "String"
        ],
        "A list of record uris"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id",
    "description": "Get a Digital Object",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:digital_object)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects",
    "description": "Create a Digital Object",
    "method": [
      "post"
    ],
    "params": [
      [
        "digital_object",
        "JSONModel(:digital_object)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id",
    "description": "Update a Digital Object",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "digital_object",
        "JSONModel(:digital_object)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects",
    "description": "Get a list of Digital Objects for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:digital_object)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id/tree",
    "description": "Get a Digital Object tree",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "OK"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id",
    "description": "Delete a Digital Object",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id/publish",
    "description": "Publish a digital object and all its sub-records and components",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id/tree/root",
    "description": "Fetch tree information for the top-level digital object record",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON object describing enough information about this tree's root record to render the rest.  Includes:\n\n  * title -- the collection title\n\n  * uri -- the collection URI\n\n  * child_count -- the number of immediate children\n\n  * waypoints -- the number of \"waypoints\" those children are grouped into\n\n  * waypoint_size -- the number of children in each waypoint"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id/tree/waypoint",
    "description": "Fetch the record slice for a given tree waypoint",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "offset",
        "Integer",
        "The page of records to return"
      ],
      [
        "parent_node",
        "String",
        "The URI of the parent of this waypoint (none for the root record)",
        {
          "optional": true
        }
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON array containing information for the records contained in a given waypoint.  Each array element is an object that includes:\n\n  * title -- the record's title\n\n  * uri -- the record URI\n\n  * position -- the logical position of this record within its subtree\n\n  * parent_id -- the internal ID of this document's parent"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id/tree/node",
    "description": "Fetch tree information for an Digital Object Component record within a tree",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "node_uri",
        "String",
        "The URI of the Digital Object Component record of interest"
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON object describing enough information about a specific node.  Includes:\n\n  * title -- the collection title\n\n  * uri -- the collection URI\n\n  * child_count -- the number of immediate children\n\n  * waypoints -- the number of \"waypoints\" those children are grouped into\n\n  * waypoint_size -- the number of children in each waypoint\n\n  * position -- the logical position of this record within its subtree\n\n  * precomputed_waypoints -- a collection of arrays (keyed on child URI) in the\n    same format as returned by the '/waypoint' endpoint.  Since a fetch for a\n    given node is almost always followed by a fetch of the first waypoint, using\n    the information in this structure can save a backend call."
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id/tree/node_from_root",
    "description": "Fetch tree paths from the root record to Digital Object Components",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "node_ids",
        [
          "Integer"
        ],
        "The IDs of the Digital Object Component records of interest"
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON array describing the path to a node, starting from the root of the tree.  Each path element provides:\n\n  * node -- the URI of the node to next expand\n\n  * offset -- the waypoint number within `node` that contains the next entry in\n    the path (or the desired record, if we're at the end of the path)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_object_components",
    "description": "Create an Digital Object Component",
    "method": [
      "post"
    ],
    "params": [
      [
        "digital_object_component",
        "JSONModel(:digital_object_component)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_object_components/:id",
    "description": "Update an Digital Object Component",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "digital_object_component",
        "JSONModel(:digital_object_component)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_object_components/:id/parent",
    "description": "Set the parent/position of an Digital Object Component in a tree",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "parent",
        "Integer",
        "The parent of this node in the tree",
        {
          "optional": true
        }
      ],
      [
        "position",
        "Integer",
        "The position of this node in the tree",
        {
          "optional": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_object_components/:id",
    "description": "Get an Digital Object Component by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:digital_object_component)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_object_components/:id/children",
    "description": "Get the children of an Digital Object Component",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:digital_object_component)]"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_object_components",
    "description": "Get a list of Digital Object Components for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:digital_object_component)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_object_components/:id",
    "description": "Delete a Digital Object Component",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/config/enumerations",
    "description": "List all defined enumerations",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:enumeration)]"
      ]
    ]
  },
  {
    "uri": "/config/enumerations",
    "description": "Create an enumeration",
    "method": [
      "post"
    ],
    "params": [
      [
        "enumeration",
        "JSONModel(:enumeration)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/config/enumerations/migration",
    "description": "Migrate all records from using one value to another",
    "method": [
      "post"
    ],
    "params": [
      [
        "migration",
        "JSONModel(:enumeration_migration)",
        "The migration request",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/config/enumerations/:enum_id",
    "description": "Update an enumeration",
    "method": [
      "post"
    ],
    "params": [
      [
        "enum_id",
        "Integer",
        "The ID of the enumeration to update"
      ],
      [
        "enumeration",
        "JSONModel(:enumeration)",
        "The enumeration to update",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/config/enumerations/:enum_id",
    "description": "Get an Enumeration",
    "method": [
      "get"
    ],
    "params": [
      [
        "enum_id",
        "Integer",
        "The ID of the enumeration to retrieve"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:enumeration)"
      ]
    ]
  },
  {
    "uri": "/config/enumeration_values/:enum_val_id",
    "description": "Get an Enumeration Value",
    "method": [
      "get"
    ],
    "params": [
      [
        "enum_val_id",
        "Integer",
        "The ID of the enumeration value to retrieve"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:enumeration_value)"
      ]
    ]
  },
  {
    "uri": "/config/enumeration_values/:enum_val_id",
    "description": "Update an enumeration value",
    "method": [
      "post"
    ],
    "params": [
      [
        "enum_val_id",
        "Integer",
        "The ID of the enumeration value to update"
      ],
      [
        "enumeration_value",
        "JSONModel(:enumeration_value)",
        "The enumeration value to update",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/config/enumeration_values/:enum_val_id/position",
    "description": "Update the position of an ennumeration value",
    "method": [
      "post"
    ],
    "params": [
      [
        "enum_val_id",
        "Integer",
        "The ID of the enumeration value to update"
      ],
      [
        "position",
        "Integer",
        "The target position in the value list"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/config/enumeration_values/:enum_val_id/suppressed",
    "description": "Suppress this value",
    "method": [
      "post"
    ],
    "params": [
      [
        "enum_val_id",
        "Integer",
        "The ID of the enumeration value to update"
      ],
      [
        "suppressed",
        "RESTHelpers::BooleanParam",
        "Suppression state"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Suppressed\", :id => (id of updated object), :suppressed_state => (true|false)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/events",
    "description": "Create an Event",
    "method": [
      "post"
    ],
    "params": [
      [
        "event",
        "JSONModel(:event)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/events/:id",
    "description": "Update an Event",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "event",
        "JSONModel(:event)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/events",
    "description": "Get a list of Events for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:event)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/events/:id",
    "description": "Get an Event by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:event)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/events/:id/suppressed",
    "description": "Suppress this record from non-managers",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "suppressed",
        "RESTHelpers::BooleanParam",
        "Suppression state"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Suppressed\", :id => (id of updated object), :suppressed_state => (true|false)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/events/:id",
    "description": "Delete an event record",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/dublin_core/:id.xml",
    "description": "Get a Dublin Core representation of a Digital Object ",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:digital_object)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/dublin_core/:id.:fmt/metadata",
    "description": "Get metadata for a Dublin Core export",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The export metadata"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/mets/:id.xml",
    "description": "Get a METS representation of a Digital Object ",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:digital_object)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/mets/:id.:fmt/metadata",
    "description": "Get metadata for a METS export",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The export metadata"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/mods/:id.xml",
    "description": "Get a MODS representation of a Digital Object ",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:digital_object)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/mods/:id.:fmt/metadata",
    "description": "Get metadata for a MODS export",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The export metadata"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/marc21/:id.xml",
    "description": "Get a MARC 21 representation of a Resource",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "include_unpublished_marc",
        "RESTHelpers::BooleanParam",
        "Include unpublished notes",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:resource)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/marc21/:id.:fmt/metadata",
    "description": "Get metadata for a MARC21 export",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "include_unpublished_marc",
        "RESTHelpers::BooleanParam",
        "Include unpublished notes",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The export metadata"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resource_descriptions/:id.xml",
    "description": "Get an EAD representation of a Resource",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "include_unpublished",
        "RESTHelpers::BooleanParam",
        "Include unpublished records",
        {
          "optional": true
        }
      ],
      [
        "include_daos",
        "RESTHelpers::BooleanParam",
        "Include digital objects in dao tags",
        {
          "optional": true
        }
      ],
      [
        "numbered_cs",
        "RESTHelpers::BooleanParam",
        "Use numbered <c> tags in ead",
        {
          "optional": true
        }
      ],
      [
        "print_pdf",
        "RESTHelpers::BooleanParam",
        "Print EAD to pdf",
        {
          "optional": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "ead3",
        "RESTHelpers::BooleanParam",
        "Export using EAD3 schema",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:resource)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resource_descriptions/:id.pdf",
    "description": "Get an EAD representation of a Resource",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "include_unpublished",
        "RESTHelpers::BooleanParam",
        "Include unpublished records",
        {
          "optional": true
        }
      ],
      [
        "include_daos",
        "RESTHelpers::BooleanParam",
        "Include digital objects in dao tags",
        {
          "optional": true
        }
      ],
      [
        "numbered_cs",
        "RESTHelpers::BooleanParam",
        "Use numbered <c> tags in ead",
        {
          "optional": true
        }
      ],
      [
        "print_pdf",
        "RESTHelpers::BooleanParam",
        "Print EAD to pdf",
        {
          "optional": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "ead3",
        "RESTHelpers::BooleanParam",
        "Export using EAD3 schema",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:resource)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resource_descriptions/:id.:fmt/metadata",
    "description": "Get export metadata for a Resource Description",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "fmt",
        "String",
        "Format of the request",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The export metadata"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resource_labels/:id.tsv",
    "description": "Get a tsv list of printable labels for a Resource",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:resource)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resource_labels/:id.:fmt/metadata",
    "description": "Get export metadata for Resource labels",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The export metadata"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_contexts/people/:id.xml",
    "description": "Get an EAC-CPF representation of an Agent",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:agent)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_contexts/people/:id.:fmt/metadata",
    "description": "Get metadata for an EAC-CPF export of a person",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The export metadata"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_contexts/corporate_entities/:id.xml",
    "description": "Get an EAC-CPF representation of a Corporate Entity",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:agent)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_contexts/corporate_entities/:id.:fmt/metadata",
    "description": "Get metadata for an EAC-CPF export of a corporate entity",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The export metadata"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_contexts/families/:id.xml",
    "description": "Get an EAC-CPF representation of a Family",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:agent)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_contexts/families/:id.:fmt/metadata",
    "description": "Get metadata for an EAC-CPF export of a family",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The export metadata"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_contexts/softwares/:id.xml",
    "description": "Get an EAC-CPF representation of a Software agent",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:agent)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_contexts/softwares/:id.:fmt/metadata",
    "description": "Get metadata for an EAC-CPF export of a software",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The export metadata"
      ]
    ]
  },
  {
    "uri": "/extent_calculator",
    "description": "Calculate the extent of an archival object tree",
    "method": [
      "get"
    ],
    "params": [
      [
        "record_uri",
        "String",
        "The uri of the object"
      ],
      [
        "unit",
        "String",
        "The unit of measurement to use",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Calculation results"
      ]
    ]
  },
  {
    "uri": "/by-external-id",
    "description": "List records by their external ID(s)",
    "method": [
      "get"
    ],
    "params": [
      [
        "eid",
        "String",
        "An external ID to find"
      ],
      [
        "type",
        [
          "String"
        ],
        "The record type to search (useful if IDs may be shared between different types)",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        303,
        "A redirect to the URI named by the external ID (if there's only one)"
      ],
      [
        300,
        "A JSON-formatted list of URIs if there were multiple matches"
      ],
      [
        404,
        "No external ID matched"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/groups",
    "description": "Create a group within a repository",
    "method": [
      "post"
    ],
    "params": [
      [
        "group",
        "JSONModel(:group)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "conflict"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/groups/:id",
    "description": "Update a group",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "group",
        "JSONModel(:group)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "with_members",
        "RESTHelpers::BooleanParam",
        "If 'true' (the default) replace the membership list with the list provided",
        {
          "default": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        409,
        "conflict"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/groups/:id",
    "description": "Get a group by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "with_members",
        "RESTHelpers::BooleanParam",
        "If 'true' (the default) return the list of members with the group",
        {
          "default": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:group)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/groups/:id",
    "description": "Delete a group by ID",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:group)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/groups",
    "description": "Get a list of groups for a repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "group_code",
        "String",
        "Get groups by group code",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:resource)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/find_by_id/resources",
    "description": "Find Resources by their identifiers",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "identifier",
        [
          "String"
        ],
        "A 4-part identifier expressed as JSON array (of up to 4 strings)",
        {
          "optional": true
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "JSON array of refs"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/find_by_id/archival_objects",
    "description": "Find Archival Objects by ref_id or component_id",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "ref_id",
        [
          "String"
        ],
        "A set of record Ref IDs",
        {
          "optional": true
        }
      ],
      [
        "component_id",
        [
          "String"
        ],
        "A set of record component IDs",
        {
          "optional": true
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "JSON array of refs"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/find_by_id/digital_object_components",
    "description": "Find Digital Object Components by component_id",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "component_id",
        [
          "String"
        ],
        "A set of record component IDs",
        {
          "optional": true
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "JSON array of refs"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/find_by_id/digital_objects",
    "description": "Find Digital Objects by digital_object_id",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "digital_object_id",
        [
          "String"
        ],
        "A set of digital object IDs",
        {
          "optional": true
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "JSON array of refs"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs",
    "description": "Create a new job",
    "method": [
      "post"
    ],
    "params": [
      [
        "job",
        "JSONModel(:job)",
        "The job object",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs_with_files",
    "description": "Create a new job and post input files",
    "method": [
      "post"
    ],
    "params": [
      [
        "job",
        "JSONModel(:job)"
      ],
      [
        "files",
        [
          "RESTHelpers::UploadFile"
        ]
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/job_types",
    "description": "List all supported job types",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "A list of supported job types"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs/import_types",
    "description": "List all supported import job types",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "A list of supported import types"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs/:id/cancel",
    "description": "Cancel a Job",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs/:id",
    "description": "Delete a Job",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs",
    "description": "Get a list of Jobs for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:job)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs/active",
    "description": "Get a list of all active Jobs for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:job)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs/archived",
    "description": "Get a list of all archived Jobs for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:job)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs/:id",
    "description": "Get a Job by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:job)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs/:id/log",
    "description": "Get a Job's log by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "offset",
        "RESTHelpers::NonNegativeInteger",
        "The byte offset of the log file to show",
        {
          "default": 0
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "The section of the import log between 'offset' and the end of file"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs/:id/output_files",
    "description": "Get a list of Job's output files by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "An array of output files"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs/:id/output_files/:file_id",
    "description": "Get a Job's output file by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "file_id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns the file"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/jobs/:id/records",
    "description": "Get a Job's list of created URIs",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "An array of created records"
      ]
    ]
  },
  {
    "uri": "/locations/batch",
    "description": "Create a Batch of Locations",
    "method": [
      "post"
    ],
    "params": [
      [
        "dry_run",
        "RESTHelpers::BooleanParam",
        "If true, don't create the locations, just list them",
        {
          "optional": true
        }
      ],
      [
        "location_batch",
        "JSONModel(:location_batch)",
        "The location batch data to generate all locations",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/locations/batch_update",
    "description": "Update a Location",
    "method": [
      "post"
    ],
    "params": [
      [
        "location_batch_update",
        "JSONModel(:location_batch_update)",
        "The location batch data to update all locations",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/locations/:id",
    "description": "Update a Location",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "location",
        "JSONModel(:location)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/locations",
    "description": "Create a Location",
    "method": [
      "post"
    ],
    "params": [
      [
        "location",
        "JSONModel(:location)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ]
    ]
  },
  {
    "uri": "/locations",
    "description": "Get a list of locations",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:location)]"
      ]
    ]
  },
  {
    "uri": "/locations/:id",
    "description": "Get a Location by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:location)"
      ]
    ]
  },
  {
    "uri": "/locations/:id",
    "description": "Delete a Location",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/location_profiles/:id",
    "description": "Update a Location Profile",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "location_profile",
        "JSONModel(:location_profile)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/location_profiles",
    "description": "Create a Location_Profile",
    "method": [
      "post"
    ],
    "params": [
      [
        "location_profile",
        "JSONModel(:location_profile)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ]
    ]
  },
  {
    "uri": "/location_profiles",
    "description": "Get a list of Location Profiles",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:location_profile)]"
      ]
    ]
  },
  {
    "uri": "/location_profiles/:id",
    "description": "Get a Location Profile by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:location_profile)"
      ]
    ]
  },
  {
    "uri": "/location_profiles/:id",
    "description": "Delete an Location Profile",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/search/location_profile",
    "description": "Search across Location Profiles",
    "method": [
      "get"
    ],
    "params": [
      [
        "q",
        "String",
        "A search query string.  Uses Lucene 4.0 syntax: http://lucene.apache.org/core/4_0_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html  Search index structure can be found in solr/schema.xml",
        {
          "optional": true
        }
      ],
      [
        "aq",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query",
        {
          "optional": true
        }
      ],
      [
        "type",
        [
          "String"
        ],
        "The record type to search (defaults to all types if not specified)",
        {
          "optional": true
        }
      ],
      [
        "sort",
        "String",
        "The attribute to sort and the direction e.g. &sort=title desc&...",
        {
          "optional": true
        }
      ],
      [
        "facet",
        [
          "String"
        ],
        "The list of the fields to produce facets for",
        {
          "optional": true
        }
      ],
      [
        "facet_mincount",
        "Integer",
        "The minimum count for a facet field to be included in the response",
        {
          "optional": true
        }
      ],
      [
        "filter",
        "JSONModel(:advanced_query)",
        "A json string containing the advanced query to filter by",
        {
          "optional": true
        }
      ],
      [
        "exclude",
        [
          "String"
        ],
        "A list of document IDs that should be excluded from results",
        {
          "optional": true
        }
      ],
      [
        "hl",
        "RESTHelpers::BooleanParam",
        "Whether to use highlighting",
        {
          "optional": true
        }
      ],
      [
        "root_record",
        "String",
        "Search within a collection of records (defined by the record at the root of the tree)",
        {
          "optional": true
        }
      ],
      [
        "dt",
        "String",
        "Format to return (JSON default)",
        {
          "optional": true
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        ""
      ]
    ]
  },
  {
    "uri": "/merge_requests/subject",
    "description": "Carry out a merge request against Subject records",
    "method": [
      "post"
    ],
    "params": [
      [
        "merge_request",
        "JSONModel(:merge_request)",
        "A merge request",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/merge_requests/agent",
    "description": "Carry out a merge request against Agent records",
    "method": [
      "post"
    ],
    "params": [
      [
        "merge_request",
        "JSONModel(:merge_request)",
        "A merge request",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/merge_requests/resource",
    "description": "Carry out a merge request against Resource records",
    "method": [
      "post"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "merge_request",
        "JSONModel(:merge_request)",
        "A merge request",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/merge_requests/digital_object",
    "description": "Carry out a merge request against Digital_Object records",
    "method": [
      "post"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "merge_request",
        "JSONModel(:merge_request)",
        "A merge request",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/notifications",
    "description": "Get a stream of notifications",
    "method": [
      "get"
    ],
    "params": [
      [
        "last_sequence",
        "Integer",
        "The last sequence number seen",
        {
          "optional": true,
          "default": 0
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "a list of notifications"
      ]
    ]
  },
  {
    "uri": "/oai",
    "description": "Handle an OAI request",
    "method": [
      "get"
    ],
    "params": [
      [
        "verb",
        "String",
        "The OAI verb (Identify, ListRecords, GetRecord, etc.)"
      ],
      [
        "metadataPrefix",
        "String",
        "One of the supported metadata types.  See verb=ListMetadataFormats for a list.",
        {
          "optional": true
        }
      ],
      [
        "from",
        "String",
        "Start date (yyyy-mm-dd, yyyy-mm-ddThh:mm:ssZ)",
        {
          "optional": true
        }
      ],
      [
        "until",
        "String",
        "End date (yyyy-mm-dd, yyyy-mm-ddThh:mm:ssZ)",
        {
          "optional": true
        }
      ],
      [
        "resumptionToken",
        "String",
        "The OAI resumption token",
        {
          "optional": true
        }
      ],
      [
        "set",
        "String",
        "Requested OAI set (see ?verb=Identify for available sets)",
        {
          "optional": true
        }
      ],
      [
        "identifier",
        "String",
        "The requested record identifier (for ?verb=GetRecord)",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "OAI response"
      ]
    ]
  },
  {
    "uri": "/oai_sample",
    "description": "A HTML form to generate one sample OAI requests",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "HTML"
      ]
    ]
  },
  {
    "uri": "/permissions",
    "description": "Get a list of Permissions",
    "method": [
      "get"
    ],
    "params": [
      [
        "level",
        "String",
        "The permission level to get (one of: repository, global, all)",
        {
          "validation": [
            "Must be one of repository, global, all",
            "#<Proc:0x46b0fb24@/Users/wdm837/archivesspace/backend/app/controllers/permission.rb:11 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:permission)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/preferences",
    "description": "Create a Preferences record",
    "method": [
      "post"
    ],
    "params": [
      [
        "preference",
        "JSONModel(:preference)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/preferences/defaults",
    "description": "Get the default set of Preferences for a Repository and optionally a user",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "username",
        "String",
        "The username to retrieve defaults for",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(defaults)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/preferences/:id",
    "description": "Get a Preferences record",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:preference)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/current_preferences",
    "description": "Get the Preferences records for the current repository and user.",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{(:preference)}"
      ]
    ]
  },
  {
    "uri": "/current_global_preferences",
    "description": "Get the global Preferences records for the current user.",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "{(:preference)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/preferences/:id",
    "description": "Update a Preferences record",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "preference",
        "JSONModel(:preference)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/preferences",
    "description": "Get a list of Preferences for a Repository and optionally a user",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "user_id",
        "Integer",
        "The username to retrieve defaults for",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:preference)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/preferences/:id",
    "description": "Delete a Preferences record",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/rde_templates",
    "description": "Create an RDE template",
    "method": [
      "post"
    ],
    "params": [
      [
        "rde_template",
        "JSONModel(:rde_template)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/rde_templates/:id",
    "description": "Get an RDE template record",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:rde_template)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/rde_templates",
    "description": "Get a list of RDE Templates",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:rde_template)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/rde_templates/:id",
    "description": "Delete an RDE Template",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/reports",
    "description": "List all reports",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "report list in json"
      ]
    ]
  },
  {
    "uri": "/reports/static/*",
    "description": "Get a static asset for a report",
    "method": [
      "get"
    ],
    "params": [
      [
        "splat",
        "String",
        "The requested asset"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "the asset"
      ]
    ]
  },
  {
    "uri": "/repositories/with_agent/:id",
    "description": "Get a Repository by ID, including its agent representation",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:repository_with_agent)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories/with_agent",
    "description": "Create a Repository with an agent representation",
    "method": [
      "post"
    ],
    "params": [
      [
        "repository_with_agent",
        "JSONModel(:repository_with_agent)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        403,
        "access_denied"
      ]
    ]
  },
  {
    "uri": "/repositories/with_agent/:id",
    "description": "Update a repository with an agent representation",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repository_with_agent",
        "JSONModel(:repository_with_agent)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:id",
    "description": "Update a repository",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repository",
        "JSONModel(:repository)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/repositories",
    "description": "Create a Repository",
    "method": [
      "post"
    ],
    "params": [
      [
        "repository",
        "JSONModel(:repository)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ],
      [
        403,
        "access_denied"
      ]
    ]
  },
  {
    "uri": "/repositories/:id",
    "description": "Get a Repository by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:repository)"
      ],
      [
        404,
        "Not found"
      ]
    ]
  },
  {
    "uri": "/repositories",
    "description": "Get a list of Repositories",
    "method": [
      "get"
    ],
    "params": [
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:repository)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id",
    "description": "Delete a Repository",
    "method": [
      "delete"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/accessions/:id/transfer",
    "description": "Transfer this record to a different repository",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "target_repo",
        "String",
        "The URI of the target repository"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "moved"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/transfer",
    "description": "Transfer this record to a different repository",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "target_repo",
        "String",
        "The URI of the target repository"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "moved"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id/transfer",
    "description": "Transfer this record to a different repository",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "target_repo",
        "String",
        "The URI of the target repository"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "moved"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/transfer",
    "description": "Transfer this record to a different repository",
    "method": [
      "post"
    ],
    "params": [
      [
        "target_repo",
        "String",
        "The URI of the target repository"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "moved"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/required_fields/:record_type",
    "description": "Require fields for a record type",
    "method": [
      "post"
    ],
    "params": [
      [
        "required_fields",
        "JSONModel(:required_fields)",
        "The fields required",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "record_type",
        "String"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/required_fields/:record_type",
    "description": "Get required fields for a record type",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "record_type",
        "String"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources",
    "description": "Create a Resource",
    "method": [
      "post"
    ],
    "params": [
      [
        "resource",
        "JSONModel(:resource)",
        "The record to create",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id",
    "description": "Get a Resource",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:resource)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/tree",
    "description": "Get a Resource tree",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "limit_to",
        "String",
        "An Archival Object URI or 'root'",
        {
          "optional": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "OK"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/ordered_records",
    "description": "Get the list of URIs of this resource and all archival objects contained within.Ordered by tree order (i.e. if you fully expanded the record tree and read from top to bottom)",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "JSONModel(:resource_ordered_records)"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id",
    "description": "Update a Resource",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "resource",
        "JSONModel(:resource)",
        "The updated record",
        {
          "body": true
        }
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources",
    "description": "Get a list of Resources for a Repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:resource)]"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id",
    "description": "Delete a Resource",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/publish",
    "description": "Publish a resource and all its sub-records and components",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/models_in_graph",
    "description": "Get a list of record types in the graph of a resource",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "OK"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/tree/root",
    "description": "Fetch tree information for the top-level resource record",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON object describing enough information about this tree's root record to render the rest.  Includes:\n\n  * title -- the collection title\n\n  * uri -- the collection URI\n\n  * child_count -- the number of immediate children\n\n  * waypoints -- the number of \"waypoints\" those children are grouped into\n\n  * waypoint_size -- the number of children in each waypoint"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/tree/waypoint",
    "description": "Fetch the record slice for a given tree waypoint",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "offset",
        "Integer",
        "The page of records to return"
      ],
      [
        "parent_node",
        "String",
        "The URI of the parent of this waypoint (none for the root record)",
        {
          "optional": true
        }
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON array containing information for the records contained in a given waypoint.  Each array element is an object that includes:\n\n  * title -- the record's title\n\n  * uri -- the record URI\n\n  * position -- the logical position of this record within its subtree\n\n  * parent_id -- the internal ID of this document's parent"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/tree/node",
    "description": "Fetch tree information for an Archival Object record within a tree",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "node_uri",
        "String",
        "The URI of the Archival Object record of interest"
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON object describing enough information about a specific node.  Includes:\n\n  * title -- the collection title\n\n  * uri -- the collection URI\n\n  * child_count -- the number of immediate children\n\n  * waypoints -- the number of \"waypoints\" those children are grouped into\n\n  * waypoint_size -- the number of children in each waypoint\n\n  * position -- the logical position of this record within its subtree\n\n  * precomputed_waypoints -- a collection of arrays (keyed on child URI) in the\n    same format as returned by the '/waypoint' endpoint.  Since a fetch for a\n    given node is almost always followed by a fetch of the first waypoint, using\n    the information in this structure can save a backend call."
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/tree/node_from_root",
    "description": "Fetch tree paths from the root record to Archival Objects",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ],
      [
        "node_ids",
        [
          "Integer"
        ],
        "The IDs of the Archival Object records of interest"
      ],
      [
        "published_only",
        "RESTHelpers::BooleanParam",
        "Whether to restrict to published/unsuppressed items",
        {
          "default": false
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Returns a JSON array describing the path to a node, starting from the root of the tree.  Each path element provides:\n\n  * node -- the URI of the node to next expand\n\n  * offset -- the waypoint number within `node` that contains the next entry in\n    the path (or the desired record, if we're at the end of the path)"
      ]
    ]
  },
  {
    "uri": "/schemas",
    "description": "Get all ArchivesSpace schemas",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "ArchivesSpace (schemas)"
      ]
    ]
  },
  {
    "uri": "/schemas/:schema",
    "description": "Get an ArchivesSpace schema",
    "method": [
      "get"
    ],
    "params": [
      [
        "schema",
        "String",
        "Schema name to retrieve"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "ArchivesSpace (:schema)"
      ],
      [
        404,
        "Schema not found"
      ]
    ]
  },
  {
    "uri": "/space_calculator/by_location",
    "description": "Calculate how many containers will fit in a list of locations",
    "method": [
      "get"
    ],
    "params": [
      [
        "container_profile_uri",
        "String",
        "The uri of the container profile"
      ],
      [
        "location_uris",
        [
          "String"
        ],
        "A list of location uris to calculate space for"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Calculation results"
      ]
    ]
  },
  {
    "uri": "/space_calculator/by_building",
    "description": "Calculate how many containers will fit in locations for a given building",
    "method": [
      "get"
    ],
    "params": [
      [
        "container_profile_uri",
        "String",
        "The uri of the container profile"
      ],
      [
        "building",
        "String",
        "The building to check for space in"
      ],
      [
        "floor",
        "String",
        "The floor to check for space in",
        {
          "optional": true
        }
      ],
      [
        "room",
        "String",
        "The room to check for space in",
        {
          "optional": true
        }
      ],
      [
        "area",
        "String",
        "The area to check for space in",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Calculation results"
      ]
    ]
  },
  {
    "uri": "/space_calculator/buildings",
    "description": "Get a Location by ID",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "Location building data as JSON"
      ]
    ]
  },
  {
    "uri": "/subjects/:id",
    "description": "Update a Subject",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "subject",
        "JSONModel(:subject)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/subjects",
    "description": "Create a Subject",
    "method": [
      "post"
    ],
    "params": [
      [
        "subject",
        "JSONModel(:subject)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ]
    ]
  },
  {
    "uri": "/subjects",
    "description": "Get a list of Subjects",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:subject)]"
      ]
    ]
  },
  {
    "uri": "/subjects/:id",
    "description": "Get a Subject by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:subject)"
      ]
    ]
  },
  {
    "uri": "/subjects/:id",
    "description": "Delete a Subject",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/accessions/:id/suppressed",
    "description": "Suppress this record",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "suppressed",
        "RESTHelpers::BooleanParam",
        "Suppression state"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Suppressed\", :id => (id of updated object), :suppressed_state => (true|false)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/resources/:id/suppressed",
    "description": "Suppress this record",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "suppressed",
        "RESTHelpers::BooleanParam",
        "Suppression state"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Suppressed\", :id => (id of updated object), :suppressed_state => (true|false)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/archival_objects/:id/suppressed",
    "description": "Suppress this record",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "suppressed",
        "RESTHelpers::BooleanParam",
        "Suppression state"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Suppressed\", :id => (id of updated object), :suppressed_state => (true|false)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_objects/:id/suppressed",
    "description": "Suppress this record",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "suppressed",
        "RESTHelpers::BooleanParam",
        "Suppression state"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Suppressed\", :id => (id of updated object), :suppressed_state => (true|false)}"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/digital_object_components/:id/suppressed",
    "description": "Suppress this record",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "suppressed",
        "RESTHelpers::BooleanParam",
        "Suppression state"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Suppressed\", :id => (id of updated object), :suppressed_state => (true|false)}"
      ]
    ]
  },
  {
    "uri": "/system/info",
    "description": "Get the diagnostic information about the system",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "(:repository)"
      ],
      [
        403,
        "Access Denied"
      ]
    ]
  },
  {
    "uri": "/system/log",
    "description": "Get the log information and start the 15 second log recorder",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "String"
      ],
      [
        403,
        "Access Denied"
      ]
    ]
  },
  {
    "uri": "/system/events",
    "description": "Get the systems events that have been logged for this install",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "String"
      ],
      [
        403,
        "Access Denied"
      ]
    ]
  },
  {
    "uri": "/system/demo_db_snapshot",
    "description": "Create a snapshot of the demo database if the file 'create_demodb_snapshot.txt' exists in the data directory",
    "method": [
      "post"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "OK"
      ]
    ]
  },
  {
    "uri": "/terms",
    "description": "Get a list of Terms matching a prefix",
    "method": [
      "get"
    ],
    "params": [
      [
        "q",
        "String",
        "The prefix to match"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:term)]"
      ]
    ]
  },
  {
    "uri": "/update-feed",
    "description": "Get a stream of updated records",
    "method": [
      "get"
    ],
    "params": [
      [
        "last_sequence",
        "Integer",
        "The last sequence number seen",
        {
          "optional": true,
          "default": 0
        }
      ],
      [
        "resolve",
        [
          "String"
        ],
        "A list of references to resolve and embed in the response",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "a list of records and sequence numbers"
      ]
    ]
  },
  {
    "uri": "/delete-feed",
    "description": "Get a stream of deleted records",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": true,
    "returns": [
      [
        200,
        "a list of URIs that were deleted"
      ]
    ]
  },
  {
    "uri": "/update_monitor",
    "description": "Refresh the list of currently known edits",
    "method": [
      "post"
    ],
    "params": [
      [
        "active_edits",
        "JSONModel(:active_edits)",
        "The list of active edits",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "A list of records, the user editing it and the lock version for each"
      ]
    ]
  },
  {
    "uri": "/users",
    "description": "Create a local user",
    "method": [
      "post"
    ],
    "params": [
      [
        "password",
        "String",
        "The user's password"
      ],
      [
        "groups",
        [
          "String"
        ],
        "Array of groups URIs to assign the user to",
        {
          "optional": true
        }
      ],
      [
        "user",
        "JSONModel(:user)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/users",
    "description": "Get a list of users",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": true,
    "returns": [
      [
        200,
        "[(:resource)]"
      ]
    ]
  },
  {
    "uri": "/users/current-user",
    "description": "Get the currently logged in user",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "(:user)"
      ],
      [
        404,
        "Not logged in"
      ]
    ]
  },
  {
    "uri": "/users/complete",
    "description": "Get a list of system users",
    "method": [
      "get"
    ],
    "params": [
      [
        "query",
        "String",
        "A prefix to search for"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "A list of usernames"
      ]
    ]
  },
  {
    "uri": "/users/:id",
    "description": "Get a user's details (including their current permissions)",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The username id to fetch"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:user)"
      ]
    ]
  },
  {
    "uri": "/users/:id/groups",
    "description": "Update a user's groups",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "groups",
        [
          "String"
        ],
        "Array of groups URIs to assign the user to",
        {
          "optional": true
        }
      ],
      [
        "remove_groups",
        "RESTHelpers::BooleanParam",
        "Remove all groups from the user for the current repo_id if true"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository groups to clear"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/users/:id",
    "description": "Update a user's account",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "password",
        "String",
        "The user's password",
        {
          "optional": true
        }
      ],
      [
        "user",
        "JSONModel(:user)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ],
      [
        400,
        "{:error => (description of error)}"
      ]
    ]
  },
  {
    "uri": "/users/:username/login",
    "description": "Log in",
    "method": [
      "post"
    ],
    "params": [
      [
        "username",
        "Username",
        "Your username"
      ],
      [
        "password",
        "String",
        "Your password"
      ],
      [
        "expiring",
        "RESTHelpers::BooleanParam",
        "If true, the session will expire after 3600 seconds of inactivity.  If false, it will  expire after 604800 seconds of inactivity.\n\nNOTE: Previously this parameter would cause the created session to last forever, but this generally isn't what you want.  The parameter name is unfortunate, but we're keeping it for backward-compatibility.",
        {
          "default": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Login accepted"
      ],
      [
        403,
        "Login failed"
      ]
    ]
  },
  {
    "uri": "/users/:username/become-user",
    "description": "Become a different user",
    "method": [
      "post"
    ],
    "params": [
      [
        "username",
        "Username",
        "The username to become"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "Accepted"
      ],
      [
        404,
        "User not found"
      ]
    ]
  },
  {
    "uri": "/repositories/:repo_id/users/:id",
    "description": "Get a user's details including their groups for the current repository",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The username id to fetch"
      ],
      [
        "repo_id",
        "Integer",
        "The Repository ID",
        {
          "validation": [
            "The Repository must exist",
            "#<Proc:0x65af4162@/Users/wdm837/archivesspace/backend/app/lib/rest.rb:59 (lambda)>"
          ]
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "(:user)"
      ]
    ]
  },
  {
    "uri": "/users/:id",
    "description": "Delete a user",
    "method": [
      "delete"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The user to delete"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "deleted"
      ]
    ]
  },
  {
    "uri": "/logout",
    "description": "Log out the current session",
    "method": [
      "post"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "Session logged out"
      ]
    ]
  },
  {
    "uri": "/version",
    "description": "Get the ArchivesSpace application version",
    "method": [
      "get"
    ],
    "params": [],
    "paginated": false,
    "returns": [
      [
        200,
        "ArchivesSpace (version)"
      ]
    ]
  },
  {
    "uri": "/vocabularies/:id",
    "description": "Update a Vocabulary",
    "method": [
      "post"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ],
      [
        "vocabulary",
        "JSONModel(:vocabulary)",
        "The updated record",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Updated\", :id => (id of updated object)}"
      ]
    ]
  },
  {
    "uri": "/vocabularies",
    "description": "Create a Vocabulary",
    "method": [
      "post"
    ],
    "params": [
      [
        "vocabulary",
        "JSONModel(:vocabulary)",
        "The record to create",
        {
          "body": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "{:status => \"Created\", :id => (id of created object), :warnings => {(warnings)}}"
      ]
    ]
  },
  {
    "uri": "/vocabularies",
    "description": "Get a list of Vocabularies",
    "method": [
      "get"
    ],
    "params": [
      [
        "ref_id",
        "String",
        "An alternate, externally-created ID for the vocabulary",
        {
          "optional": true
        }
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:vocabulary)]"
      ]
    ]
  },
  {
    "uri": "/vocabularies/:id/terms",
    "description": "Get a list of Terms for a Vocabulary",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "[(:term)]"
      ]
    ]
  },
  {
    "uri": "/vocabularies/:id",
    "description": "Get a Vocabulary by ID",
    "method": [
      "get"
    ],
    "params": [
      [
        "id",
        "Integer",
        "The ID of the record"
      ]
    ],
    "paginated": false,
    "returns": [
      [
        200,
        "OK"
      ]
    ]
  }
]
